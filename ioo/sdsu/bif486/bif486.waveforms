       COMMENT *
	$Header: /space/home/eng/cjm/cvs/ioo/sdsu/bif486/bif486.waveforms,v 1.11 2011-12-09 11:20:45 cjm Exp $
	Id: 	 $Id: bif486.waveforms,v 1.11 2011-12-09 11:20:45 cjm Exp $
	Version: $Revision: 1.11 $
Waveform tables for Fairchild 486 4k x 4k CCD back-side CCD with the ARC 
	four readout camera head board. 
Generated from scratch from the spec sheet.
Contains waveforms for split serial, split parallel and binning operation.

The quadrants are defined as follows - 

0	Lower Left			3	2
1	Lower right
2	Upper right			0	1
3	Upper Left

	*

; Definitions of readout variables
VIDEO	EQU	$000000		; Video processor board switches
CLK2	EQU	$002000		; Clock driver board lower half
CLK3	EQU	$003000		; Clock driver board lower half
DC0	EQU	$000000         ; Video board DC bias supply DAC voltage address 
DC1	EQU	$100000
CLKV	EQU	$200000	        ; Clock driver board DAC voltage selection address 
P_DLY	EQU	$FF0000		; Parallel clock delay, bit 23 set so 0x70 = 127x640ns +40ns delay = 81320 ns = 81 us
				; However, on oscilloscope only 41us
SER_DLY	EQU	$060000		; Slow delay on Spec sheet $060000 =  6x40ns +40ns instruction = 280ns (should be 300ns)
				; Faster readout $030000 = 3x40ns +40ns instruction = 160ns
SC_DLY	EQU	$010000		; Serial clear delay
NSCLR	EQU	2060		; To clear the serial register
NPCLR	EQU	1024    	; To clear the parallel register. Should be at least 2049, but anything longer than
				; 1024 causes CLR to return TOUT.
SH_DEL	EQU	100		; Delay in milliseconds between shutter
				;   closing and image readout
PRESCAN EQU	0		; PRESCAN - 18 according to data sheet
				; But PRESCAN is clocked over in RDCCD, why not set this to 0?
PRESKIP EQU	0		; cjm PRESKIP
NPAR	EQU	1		; Repeat number for SLOW_CLOCKS

INT_TIM EQU	$060000		; Fast readout

; The serial clocks are mostly on the lower bank, CLK2
RG	EQU	1	; Reset Gate			pin #1
H1L	EQU	2	; Horizontal clock, left	pin #2
H2L	EQU	4	; 				pin #3
H3	EQU	8	; 				pin #4
H1R	EQU	$10	; Horizontal clock, right	pin #5
H2R	EQU	$20	; 				pin #6
SG	EQU	$40	; Summing Well Gate		pin #7
; TG is effectively triggered by the High -> Low transition of the Reset Gate RG

; The parallel clocks are all on the upper bank, CLK3
V1U	EQU	1	; Vertical clock, upper		pin #13
V2U	EQU	2	; 				pin #14
V3U	EQU	4	; 				pin #15
V1L	EQU	8	; Vertical clock, lower		pin #16
V2L	EQU	$10	; 				pin #17
V3L	EQU	$20	; 				pin #18
VTG	EQU	$40	; Vertical Transfer Gate	pin #19


; Define the clocking voltages
RG_HI	EQU	+10.0	; Reset Gate
RG_LO	EQU	+2.0
H_HI	EQU	+5.0	; Horizontal clocks
H_LO	EQU	-5.0
SG_HI   EQU	+9.0	; Summing Gate = Summing Well
SG_LO	EQU	-5.0
V_HI	EQU	+2.5	; Vertical clocks
V_LO	EQU	-8.5
VTG_HI	EQU	+4.5	; Vertical Transfer Gate VTG
VTG_LO	EQU	-6.5	
Vmax	EQU    +13.0	; Maximum clock driver voltage (see ARC-32 clock driver board docs)
ZERO	EQU	 0.0

; DC Bias definition
VOD	EQU	+27.0	; Output Drain
VRD	EQU	+17.5	; Reset Drain
VOG	EQU	 -2.5	; Output Gate

; Video offset variables
OFFSET	EQU	$400
OFFSET0	EQU	$510  ; Bottom Left  
OFFSET1	EQU	$3F6  ; Bottom Right
OFFSET2	EQU	$9B0  ; Top Right
OFFSET3	EQU	$500  ; Top Left

;SXMIT	EQU	$00F0C0				; Transmit A/Ds = 0 to 3
;SXMIT	EQU	$00F040				; Transmit A/Ds = 0 to 1
;SXMIT	EQU	$00F0C2				; Transmit A/Ds = 2 to 3

;SXMIT	EQU	$00F000				; Transmit A/D = 0
;SXMIT	EQU	$00F041				; Transmit A/D = 1
;SXMIT	EQU	$00F082				; Transmit A/D = 2
;SXMIT	EQU	$00F0C3				; Transmit A/D = 3

;  ****************  Tables for parallel transfer  ****************

; Copied from fif486 PARALLEL_UPPER
PARALLEL_UP_START
 	DC	END_PARALLEL_UP_START-PARALLEL_UP_START-1
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_UP_START

PARALLEL_UP_BIN
 	DC	END_PARALLEL_UP_BIN-PARALLEL_UP_BIN-1
; copied from PARALLEL_UP_END
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
; diddly keep VTG high here
	DC	CLK3+P_DLY+VTG+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+VTG+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+000+000+000+000+000
; copied from PARALLEL_UP_START
	DC	CLK3+P_DLY+VTG+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+VTG+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+000+V1U+000+000 ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_UP_BIN

PARALLEL_UP_END
 	DC	END_PARALLEL_UP_END-PARALLEL_UP_END-1
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+000+00+000+H1R
	DC	CLK2+SER_DLY+SG+RG+H1L+000+H3+000+H1R
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
END_PARALLEL_UP_END

; Copied from fif486 PARALLEL_LOWER
PARALLEL_DOWN_START
 	DC	END_PARALLEL_DOWN_START-PARALLEL_DOWN_START-1
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_DOWN_START

PARALLEL_DOWN_BIN
 	DC	END_PARALLEL_DOWN_BIN-PARALLEL_DOWN_BIN-1
; copied from PARALLEL_DOWN_END
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
; copied from PARALLEL_DOWN_START
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_DOWN_BIN

PARALLEL_DOWN_END
 	DC	END_PARALLEL_DOWN_END-PARALLEL_DOWN_END-1
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+000+00+000+H1R
	DC	CLK2+SER_DLY+SG+RG+H1L+000+H3+000+H1R
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
END_PARALLEL_DOWN_END

; Parallel transfer in both directions, MPP
PARALLEL_SPLIT_START
 	DC	END_PARALLEL_SPLIT_START-PARALLEL_SPLIT_START-1
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_SPLIT_START

PARALLEL_SPLIT_BIN
 	DC	END_PARALLEL_SPLIT_BIN-PARALLEL_SPLIT_BIN-1
; copied from PARALLEL_SPLIT_END
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
; copied from PARALLEL_SPLIT_START
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
END_PARALLEL_SPLIT_BIN

PARALLEL_SPLIT_END
 	DC	END_PARALLEL_SPLIT_END-PARALLEL_SPLIT_END-1
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
; setup serial clocks correctly
	DC	CLK2+SER_DLY+SG+RG+H1L+000+00+000+H1R
	DC	CLK2+SER_DLY+SG+RG+H1L+000+H3+000+H1R
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+RG+000+000+H3+000+000
END_PARALLEL_SPLIT_END

PARALLEL_CLEAR_UP
	DC	END_PARALLEL_CLEAR_UP-PARALLEL_CLEAR_UP-1
	DC	VIDEO+$000000+%0011000 ; rst, clamp to ground, amp inverting, don't integrate, no A/D, no xfer
	DC	CLK2+00000+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
END_PARALLEL_CLEAR_UP

PARALLEL_CLEAR_DOWN
 	DC	END_PARALLEL_CLEAR_DOWN-PARALLEL_CLEAR_DOWN-1
	DC	VIDEO+$000000+%0011000 ; rst, clamp to ground, amp inverting, don't integrate, no A/D, no xfer
	DC	CLK2+00000+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+000+V2U+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+V1U+000+000 ; duplicate of line above to get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
END_PARALLEL_CLEAR_DOWN

; Parallel transfer in both directions for the fastest clear, MPP mode
PARALLEL_CLEAR_SPLIT
	DC	END_PARALLEL_CLEAR_SPLIT-PARALLEL_CLEAR_SPLIT-1
	DC	VIDEO+$000000+%0011000 ; rst, clamp to ground, amp inverting, don't integrate, no A/D, no xfer
	DC	CLK2+00000+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+000+V2L+000+V1U+000+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+VTG+000+V2L+V3L+V1U+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+000+000+V3L+000+000+V3U ; duplicate of line above to get 300us pulse width
	DC	CLK3+P_DLY+VTG+V1L+000+V3L+000+V2U+V3U
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+V1L+000+000+000+V2U+000 ; duplicate of line aboveto get 200us pulse width
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
END_PARALLEL_CLEAR_SPLIT

;  ****************  Tables for serial transfer  ****************
;    xfer, A/D, integ, Pol+, Pol-, DCclamp, rst  (1 => switch open)

; Idle mode clocking, split serial for speed
SERIAL_IDLE
 	DC	END_SERIAL_IDLE-SERIAL_IDLE-1
	DC	VIDEO+%1110100                  ; start A/D sample/hold, transfer image data to latch ,
						; reset integrator, clamp video to ground
	DC	CLK2+SER_DLY+00+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+H2L+H3+H1R+000
	DC	CLK2+SER_DLY+00+00+000+H2L+00+H1R+000
	DC	CLK2+SER_DLY+00+00+000+H2L+00+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+0000000+SG+00+H1L+000+00+000+H2R
; integrate reset
	DC	VIDEO+$000000+%0010111		; Stop resetting integrator
I_RST1	DC	VIDEO+$050000+%0000111		; Integrate non-inverting
	DC	VIDEO+$010000+%0011011		; Stop Integrate
	DC	CLK2+SER_DLY+SG+00+H1L+000+00+000+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+000+H2R
	DC	CLK2+0000000+00+00+000+000+H3+000+000
; integrate signal
I_SIG1	DC	VIDEO+$060000+%0001011		; Integrate inverting 
	DC	VIDEO+$000000+%0011011		; Stop Integrate, A/D is sampling
END_SERIAL_IDLE

SERIAL_SKIP_LEFT	; Serial clocking waveform for skipping left
	DC	END_SERIAL_SKIP_LEFT-SERIAL_SKIP_LEFT-1
	DC	CLK2+SER_DLY+00+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+H1L+H2L+00+H1R+H2R ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+00+00+H1L+000+00+H1R+000
	DC	CLK2+SER_DLY+00+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+000+H3+000+000 ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+000+H2R
END_SERIAL_SKIP_LEFT

SERIAL_SKIP_RIGHT	; Serial clocking waveform for skipping right
	DC	END_SERIAL_SKIP_RIGHT-SERIAL_SKIP_RIGHT-1
	DC	CLK2+SER_DLY+00+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+000+H2L+00+000+H2R
	DC	CLK2+SER_DLY+00+00+000+H2L+00+000+H2R ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+00+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+000+H3+000+000 ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+H1R+000 ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
END_SERIAL_SKIP_RIGHT

SERIAL_SKIP_SPLIT	; Serial clocking waveform for skipping both ends
	DC	END_SERIAL_SKIP_SPLIT-SERIAL_SKIP_SPLIT-1
	DC	CLK2+SER_DLY+00+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+00+00+H1L+000+00+000+H2R
	DC	CLK2+SER_DLY+00+00+H1L+000+00+000+H2R ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000 ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+H1R+000
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+H1R+000 ; duplicate to make horizontal waveforms 1200ns long (4x300ns)
END_SERIAL_SKIP_SPLIT

; Put the serial clocks and video processor in the expose state 
SERIALS_EXPOSE
	DC	END_SERIALS_EXPOSE-SERIALS_EXPOSE-1
	DC	CLK3+P_DLY+000+000+000+000+000+000+000
	DC	CLK2+SC_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	VIDEO+%0011000
END_SERIALS_EXPOSE

SERIAL_CLEAR		; Serial clocking waveform for clearing both ends
	DC	END_SERIAL_CLEAR-SERIAL_CLEAR-1
	DC	CLK2+SER_DLY+00+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+H2L+H3+H1R+000
	DC	CLK2+SER_DLY+SG+RG+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+000+00+000+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+000+H2R
END_SERIAL_CLEAR

; Copied from E2V231.waveforms
RESET_VIDEO
 	DC	END_RESET_VIDEO-RESET_VIDEO-1
	DC	VIDEO+$000000+%0010111		; Stop resetting integrator
INTEGRATE_RESET
	DC	VIDEO+INT_TIM+%0000111		; Integrate
	DC	VIDEO+$000000+%0011011		; Stop Integrate
END_RESET_VIDEO

; ************ Waveform generating code for the LEFT ****************

; This generated from scratch from CCD486 spec sheet
FIRST_CLOCKS_LEFT
 	DC	END_FIRST_CLOCKS_LEFT-FIRST_CLOCKS_LEFT-1
	DC	CLK2+SER_DLY+00+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+H2L+H3+000+H2R
	DC	CLK2+SER_DLY+SG+00+000+H2L+00+000+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
; last line should have short delay here for binning 1 only, as RESET_VIDEO comes next
END_FIRST_CLOCKS_LEFT

; This generated from scratch from CCD486 spec sheet
; NB this is clocked NSBIN-1, i.e. only for bin clocking, first/bin1 clocks should go in FIRST_CLOCKs.
; We should keep SG high throughout CLOCK_LINE, 
CLOCK_LINE_LEFT
	DC	END_CLOCK_LINE_LEFT-CLOCK_LINE_LEFT-1
	DC	CLK2+SER_DLY+SG+00+H1L+000+00+H1R+000 
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+H1R+000
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+000+H2R
	DC	CLK2+SER_DLY+SG+00+000+H2L+00+000+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R ; 
END_CLOCK_LINE_LEFT

; part of serial waveform (end thereof)
; reset video level available following high-low transition of RG (see FIRST_CLOCK_)
; output video available following high-low transition of SG
CHARGE_DUMP_LEFT
 	DC	END_CHARGE_DUMP_LEFT-CHARGE_DUMP_LEFT-1
	DC	CLK2+SER_DLY+00+00+H1L+000+00+H1R+000
	DC	CLK2+SER_DLY+00+00+H1L+000+H3+H1R+000
INTEGRATE_SIGNAL_LEFT ; Copied from E2V231
	DC	VIDEO+INT_TIM+%0001011		; Integrate
	DC	VIDEO+$000000+%0011011		; Stop, A/D is sampling

	DC	VIDEO+$000000+%1110100		; reset integrator, video clamp to ground, 
						; start A/D sample hold, transfer A/D convertor to latch
END_CHARGE_DUMP_LEFT

; **************  Waveform generating code for the RIGHT  **********

; This generated from scratch from CCD486 spec sheet
FIRST_CLOCKS_RIGHT
 	DC	END_FIRST_CLOCKS_RIGHT-FIRST_CLOCKS_RIGHT-1
	DC	CLK2+SER_DLY+00+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+H1L+000+H3+H1R+000
;	DC	CLK2+SER_DLY+00+00+H1L+000+00+H1R+000
	DC	CLK2+SER_DLY+00+00+H1L+000+00+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+000+H2L+00+000+H2R
;	DC	CLK2+SER_DLY+SG+00+000+H2L+00+000+H2R
; last line should have short delay here for binning 1 only, as RESET_VIDEO comes next
END_FIRST_CLOCKS_RIGHT

; This generated from scratch from CCD486 spec sheet
; This called for NSBIN-1. No RG, SG remains high 
CLOCK_LINE_RIGHT
 	DC	END_CLOCK_LINE_RIGHT-CLOCK_LINE_RIGHT-1
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+000+H2R
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+000+00+H1R+000 
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+000+H2L+00+000+H2R
END_CLOCK_LINE_RIGHT

; part of serial waveform (end thereof)
; output video available following high-low transition of SG
CHARGE_DUMP_RIGHT
 	DC	END_CHARGE_DUMP_RIGHT-CHARGE_DUMP_RIGHT-1
	DC	CLK2+SER_DLY+00+00+000+H2L+H3+000+H2R
;	DC	CLK2+SER_DLY+00+00+000+H2L+H3+000+H2R
INTEGRATE_SIGNAL_RIGHT ; Copied from E2V231
	DC	VIDEO+INT_TIM+%0001011		; Integrate
	DC	VIDEO+$000000+%0011011		; Stop, A/D is sampling
	DC	VIDEO+$000000+%1110100 
END_CHARGE_DUMP_RIGHT

; **************  Waveform generating code for SPLIT = Both  **********

; This generated from scratch from CCD486 spec sheet
; We pulse Reset Gate RG at the start of the waveform to allow settle time before sampling the reset voltage
; left shift left
; right shift right
FIRST_CLOCKS_SPLIT
 	DC	END_FIRST_CLOCKS_SPLIT-FIRST_CLOCKS_SPLIT-1
	DC	CLK2+SER_DLY+00+RG+000+000+H3+000+000
	DC	CLK2+SER_DLY+00+00+000+H2L+H3+H1R+000
	DC	CLK2+SER_DLY+00+00+000+H2L+00+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+000+H2R
END_FIRST_CLOCKS_SPLIT

; This generated from scratch from CCD486 spec sheet
CLOCK_LINE_SPLIT
 	DC	END_CLOCK_LINE_SPLIT-CLOCK_LINE_SPLIT-1
	DC	CLK2+SER_DLY+SG+00+H1L+000+00+000+H2R 
	DC	CLK2+SER_DLY+SG+00+H1L+000+H3+000+H2R
	DC	CLK2+SER_DLY+SG+00+000+000+H3+000+000
	DC	CLK2+SER_DLY+SG+00+000+H2L+H3+H1R+000
	DC	CLK2+SER_DLY+SG+00+000+H2L+00+H1R+000
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+H1R+H2R
	DC	CLK2+SER_DLY+SG+00+H1L+H2L+00+000+H2R ;
END_CLOCK_LINE_SPLIT

; part of serial waveform (end thereof)
; RG high only for last clock
; output video available following high-low transition of SG 
CHARGE_DUMP_SPLIT
 	DC	END_CHARGE_DUMP_SPLIT-CHARGE_DUMP_SPLIT-1
	DC	CLK2+SER_DLY+00+00+H1L+000+00+000+H2R ; 
	DC	CLK2+SER_DLY+00+00+H1L+000+H3+000+H2R
INTEGRATE_SIGNAL_SPLIT ; Copied from E2V231
	DC	VIDEO+INT_TIM+%0001011		; Integrate
	DC	VIDEO+$000000+%0011011		; Stop, A/D is sampling
	DC	VIDEO+$000000+%1110100
END_CHARGE_DUMP_SPLIT


; ARC-32
DACS	DC	END_DACS-DACS-1
	DC	CLKV+$0A0080					; DAC = unbuffered mode
	DC	CLKV+$000100+@CVI((RG_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #1, Reset Gate
	DC	CLKV+$000200+@CVI((RG_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$000400+@CVI((H_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #2, H1L
	DC	CLKV+$000800+@CVI((H_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$002000+@CVI((H_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #3, H2L
	DC	CLKV+$004000+@CVI((H_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$008000+@CVI((H_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #4, H3
	DC	CLKV+$010000+@CVI((H_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$020100+@CVI((H_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #5, H1R
	DC	CLKV+$020200+@CVI((H_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$020400+@CVI((H_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #6, H2R
	DC	CLKV+$020800+@CVI((H_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$022000+@CVI((SG_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #7, SG
	DC	CLKV+$024000+@CVI((SG_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$028000+@CVI((ZERO+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #8, Unused
	DC	CLKV+$030000+@CVI((ZERO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$040100+@CVI((ZERO+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #9, Unused
	DC	CLKV+$040200+@CVI((ZERO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$040400+@CVI((ZERO+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #10, Unused
	DC	CLKV+$040800+@CVI((ZERO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$042000+@CVI((ZERO+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #11, Unused
	DC	CLKV+$044000+@CVI((ZERO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$048000+@CVI((ZERO+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #12, Unused
	DC	CLKV+$050000+@CVI((ZERO+Vmax)/(2*Vmax)*255)

; Define all the parallel clock voltages
	DC	CLKV+$060100+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #13, V1U
	DC	CLKV+$060200+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$060400+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #14, V2U
	DC	CLKV+$060800+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$062000+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #15, V3U
	DC	CLKV+$064000+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$068000+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #16, V1L
	DC	CLKV+$070000+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$080100+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #17, V2L
	DC	CLKV+$080200+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$080400+@CVI((V_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #18, V3L
	DC	CLKV+$080800+@CVI((V_LO+Vmax)/(2*Vmax)*255)
	DC	CLKV+$082000+@CVI((VTG_HI+Vmax)/(2*Vmax)*255)	; ARC-32 Pin #19, VTG
	DC	CLKV+$084000+@CVI((VTG_LO+Vmax)/(2*Vmax)*255)

;  ******************  Code for 2 x ARC-45  ****************************

; Set video processor gain and integrator speed.
	DC	DC0+$0c3fbb		; Default with INT_TIM = $06
	DC	DC1+$0c3fbb

; Definitions of available gain settings
;	DC	$0c3f77			; x1    Gain, fast integrate
;	DC	$0c3fbb			; x2    Gain, fast integrate
;	DC	$0c3fdd			; x4.75 Gain, fast integrate
;	DC	$0c3fee			; x9    Gain, fast integrate
;	DC	$0c3cbb			; x2	Gain, slow integrate

; Output offset voltages to get about 1000 A/D units
	DC	DC0+$0c8000+OFFSET0	; Output #0, Lower Left,  VID0
	DC	DC0+$0cc000+OFFSET1	; Output #1, Lower Right, VID0
	DC	DC1+$0c8000+OFFSET2	; Output #2, Upper Right, VID1
	DC	DC1+$0cc000+OFFSET3	; Output #3, Upper Left,  VID1

; Output drain DC bias voltages
	DC	DC0+$0d0000+@CVI((VOD-7.5)/22.5*4095)	; Vod #0 = LL, ARC-45 #0, DB25 pin #1
	DC	DC0+$0d4000+@CVI((VOD-7.5)/22.5*4095)	; Vod #1 = LR, ARC-45 #0, DB25 pin #2
	DC	DC1+$0d0000+@CVI((VOD-7.5)/22.5*4095)	; Vod #2 = UR, ARC-45 #1, DB25 pin #1
	DC	DC1+$0d4000+@CVI((VOD-7.5)/22.5*4095)	; Vod #3 = UL, ARC-45 #1, DB25 pin #2

; Reset drain DC bias voltages
	DC	DC0+$0c0000+@CVI((VRD-5.0)/15.0*4095)	; Vrd #0 = LL, ARC-45 #0, DB25 pin #3
	DC	DC0+$0c4000+@CVI((VRD-5.0)/15.0*4095)	; Vrd #1 = LR, ARC-45 #0, DB25 pin #4
	DC	DC1+$0c0000+@CVI((VRD-5.0)/15.0*4095)	; Vrd #2 = UR, ARC-45 #1, DB25 pin #3
	DC	DC1+$0c4000+@CVI((VRD-5.0)/15.0*4095)	; Vrd #3 = LR, ARC-45 #1, DB25 pin #4

; Output gate DC bias voltages
	DC	DC0+$0e0000+@CVI((VOG+10.0)/20.0*4095) 	; Vog #0 = LL, ARC-45 #0, DB25 pin #9
	DC	DC0+$0e4000+@CVI((VOG+10.0)/20.0*4095) 	; Vog #1 = LR, ARC-45 #0, DB25 pin #10
	DC	DC1+$0e0000+@CVI((VOG+10.0)/20.0*4095) 	; Vog #2 = UR, ARC-45 #1, DB25 pin #9
	DC	DC1+$0e4000+@CVI((VOG+10.0)/20.0*4095) 	; Vog #3 = UL, ARC-45 #1, DB25 pin #10

END_DACS

;
; $Log: not supported by cvs2svn $
; Revision 1.10  2011/10/26 16:46:43  cjm
; Changes by IAS to improve readout.
;
; Revision 1.9  2011/10/25 11:18:44  cjm
; Changes to SERIAL_CLEAR, FIRST_CLOCKS_LEFT and delays in CHARGE_DUMP_LEFT.
;
; Revision 1.8  2011/10/20 13:28:51  cjm
; Split the PARALLEL waveforms into 3, _START, _BIN and _END,
; so parallel binning works properly.
; Changed _RIGHT and _SPLIT serial clocks to match the _LEFT ones.
; SG is now turned on in the FIRST_ waveforms, the RG gate is pulsed
; coindicent with SG.
;
; Revision 1.7  2011/10/19 10:28:28  cjm
; First version which correctly reads out (from topleft only).
; Parallel up now contains serial clocking to get the serial clocks in the right state (H1 and H2 high).
; SER_DLY back to $060000 (280ns) for now.
;
; Revision 1.6  2011/10/06 10:24:33  cjm
; Changed SER_DLY from $060000 to $030000 to speed up readout.
;
; Revision 1.5  2011/09/23 14:21:21  cjm
; Reduced NPCLR from 4400 to 1024 so CLR does not TOUT.
; Set OFFSET0 to OFFSET, so bias levels are sane.
; Changed SH_DEL from 50 to 100ms, see Uniblitz CS90 docs for details.
;
; Revision 1.4  2011/09/09 12:23:39  cjm
; Fixed parallel waveforms by duplicating clock lines.
; P_DLY 0xFF0000 should be 81us, but on oscilloscope only takes 41us.
; Serial waveforms modified to get 1200ns pulse width (should be 1.25us).
;
; Revision 1.3  2011/09/08 13:58:04  cjm
; Rewritten. Names closer to spec sheet: SW -> SG. TG-> VTG.
; Voltages changed to summary test report voltages.
; Waveforms modified. Output video now sampled after SG high->low transition.
; Reset video now sampled after RG pulsed high, before SG high->low transition.
; RG pulse now moved to start of waveform to allow binning to work.
; SG now remains high throughout binning to allow binning to work.
;
; Revision 1.2  2011/05/19 15:14:09  cjm
; Changed DACS entries to new ARC-32 8bit entries.
; Modified ARC-45 Video processor DAC entries as well to better use constants,
; although the values themselves have not changed.
;
; Revision 1.1  2011/02/24 11:03:01  cjm
; Initial revision
;
;
